{"version":3,"sources":["Countdown.jsx","Ramadan.jsx","App.js","index.js"],"names":["Countdown","countdownData","name","isItRday","className","days","hours","minutes","seconds","Ramadan","day","month","useState","state","setState","undefined","currentTime","Date","currentYear","getFullYear","getDate","getMonth","useEffect","setInterval","prevState","dateAtm","ramadanDay","getTime","timeRemaining","Math","floor","countdown","monthRday","App","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAgCeA,EA9BG,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,cAA0B,EAAXC,KAClC,IAAKD,EAAcE,SACjB,OACE,6BACE,wBAAIC,UAAU,WAAd,6BAGA,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,iBACZH,EAAcI,KACf,0BAAMD,UAAU,UAAhB,SAEF,yBAAKA,UAAU,iBACZH,EAAcK,MACf,0BAAMF,UAAU,UAAhB,UAEF,yBAAKA,UAAU,iBACZH,EAAcM,QACf,0BAAMH,UAAU,UAAhB,YAEF,yBAAKA,UAAU,iBACZH,EAAcO,QACf,0BAAMJ,UAAU,UAAhB,eCiGGK,EAtHC,SAAC,GAA0B,IAAxBP,EAAuB,EAAvBA,KAAMQ,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,MAAY,EAEdC,mBAAS,CACjCJ,QAAS,EACTF,MAAO,EACPC,QAAS,EACTF,KAAM,EACNF,UAAU,IAP4B,mBAEjCU,EAFiC,KAE1BC,EAF0B,UAU3BC,IAATb,QAA8Ba,IAARL,QAA+BK,IAAVJ,IAE7CT,EAAO,SACPS,EAAQ,EACRD,EAAM,GAIR,IAAMM,EAAc,IAAIC,KAElBC,EAAcF,EAAYG,cAK1BhB,EACJa,EAAYI,YAAcV,GAAOM,EAAYK,aAAeV,EAAQ,EAEtEW,qBAAU,WACRC,aAAY,WA0CLpB,EAGHW,GAAS,SAACU,GAAD,mBAAC,eACLA,GADI,IAEPrB,UAAU,OA9CI,WAEhB,IAAMsB,EAAU,IAAIR,KAIhBS,EAAa,IAAIT,KAAKC,EAAaP,EAAQ,EAAGD,GAC9Ce,EAAUC,EACZA,EAAa,IAAIT,KAAKC,EAAc,EAAGP,EAAQ,EAAGD,GACzCe,EAAQN,gBAAkBO,EAAWP,cAAgB,IAC9DO,EAAa,IAAIT,KAAKC,EAAaP,EAAQ,EAAGD,IAIhD,IAAMM,EAAcS,EAAQE,UAKtBC,EAHcF,EAAWC,UAGKX,EAEhCR,EAAUqB,KAAKC,MAAMF,EAAgB,KACrCrB,EAAUsB,KAAKC,MAAMtB,EAAU,IAC/BF,EAAQuB,KAAKC,MAAMvB,EAAU,IAC7BF,EAAOwB,KAAKC,MAAMxB,EAAQ,IAE9BE,GAAW,GACXD,GAAW,GACXD,GAAS,GAGTQ,GAAS,SAACU,GAAD,mBAAC,eACLA,GADI,IAEPhB,UACAD,UACAD,QACAD,OACAF,gBAKF4B,KAOD,OACF,CAACb,EAAaR,EAAKP,EAAUQ,IAEhC,IAeIqB,EAde,CACjB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAbY,IAAIf,KAAKC,EAAaP,EAAQ,EAAGD,GAeZW,YAEnC,OACE,yBAAKjB,UAAU,QACb,kBAAC,EAAD,CAAWH,cAAeY,EAAOX,KAAMA,KACrCC,GACA,oCACE,yBAAKC,UAAU,eAAf,yBACwB,6BADxB,aACwCM,EADxC,IAC8CsB,EAD9C,KAC2Dd,EACzD,wBAAId,UAAU,QAAd,oBAEF,6BACE,wBAAIA,UAAU,QAAd,4CACA,8DAAqC,6BAArC,2C,OClGG6B,MAVf,WACE,OACE,yBAAK7B,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8B,OAAK,EAACC,KAAK,yBAAyBC,UAAW3B,O,QCH9D4B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.a628fbbb.chunk.js","sourcesContent":["import React from 'react';\n\nconst Countdown = ({ countdownData, name }) => {\n  if (!countdownData.isItRday) {\n    return (\n      <div>\n        <h1 className='heading'>\n          Countdown to Ramadan 2022\n        </h1>\n        <div className='countdown-wrapper'>\n          <div className='countdown-box'>\n            {countdownData.days}\n            <span className='legend'>Days</span>\n          </div>\n          <div className='countdown-box'>\n            {countdownData.hours}\n            <span className='legend'>Hours</span>\n          </div>\n          <div className='countdown-box'>\n            {countdownData.minutes}\n            <span className='legend'>Minutes</span>\n          </div>\n          <div className='countdown-box'>\n            {countdownData.seconds}\n            <span className='legend'>Seconds</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default Countdown;\n","import React, { useState, useEffect } from 'react';\nimport Countdown from './Countdown';\n\nconst Ramadan = ({ name, day, month }) => {\n  // useState Hooks\n  const [state, setState] = useState({\n    seconds: 0,\n    hours: 0,\n    minutes: 0,\n    days: 0,\n    isItRday: false,\n  });\n\n  if (name === undefined || day === undefined || month === undefined) {\n    // This is if not enough params are provided\n    name = 'Sanusi'; // Name of the Person\n    month = 4; // Month of the Ramadan\n    day = 2; // Day of the Ramadan\n  }\n\n  // get current time\n  const currentTime = new Date();\n  // get current year\n  const currentYear = currentTime.getFullYear();\n\n  // Getting the Ramadan in Data Object\n  // WE subtract 1 from momnth ; Months start from 0 in Date Object\n  // Ramadan Boolean\n  const isItRday =\n    currentTime.getDate() === day && currentTime.getMonth() === month - 1;\n\n  useEffect(() => {\n    setInterval(() => {\n      const countdown = () => {\n        // Getting the Current Date\n        const dateAtm = new Date();\n\n        // if the Ramadan has passed\n        // then set the Ramadan countdown for next year\n        let ramadanDay = new Date(currentYear, month - 1, day);\n        if (dateAtm > ramadanDay) {\n          ramadanDay = new Date(currentYear + 1, month - 1, day);\n        } else if (dateAtm.getFullYear() === ramadanDay.getFullYear() + 1) {\n          ramadanDay = new Date(currentYear, month - 1, day);\n        }\n\n        // Getitng Current Time\n        const currentTime = dateAtm.getTime();\n        // Getting Ramadans Time\n        const ramadanTime = ramadanDay.getTime();\n\n        // Time remaining for the Ramadan\n        const timeRemaining = ramadanTime - currentTime;\n\n        let seconds = Math.floor(timeRemaining / 1000);\n        let minutes = Math.floor(seconds / 60);\n        let hours = Math.floor(minutes / 60);\n        let days = Math.floor(hours / 24);\n\n        seconds %= 60;\n        minutes %= 60;\n        hours %= 24;\n\n        // Setting States\n        setState((prevState) => ({\n          ...prevState,\n          seconds,\n          minutes,\n          hours,\n          days,\n          isItRday,\n        }));\n        // console.log(`${days}:${hours}:${minutes}:${seconds} , ${isItRday}`);\n      };\n      if (!isItRday) {\n        countdown();\n      } else {\n        setState((prevState) => ({\n          ...prevState,\n          isItRday: true,\n        }));\n      }\n    }, 1000);\n  }, [currentYear, day, isItRday, month]);\n\n  let ramadan = new Date(currentYear, month - 1, day);\n  const monthNames = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n  let monthRday = monthNames[ramadan.getMonth()];\n\n  return (\n    <div className='page'>\n      <Countdown countdownData={state} name={name} />\n      {!isItRday && (\n        <>\n          <div className='ramadanDate'>\n            Ramadan Starting Date:<br/> Saturday {day} {monthRday}, {currentYear}\n            <h2 className='wish'>01-RAMADAN-1443</h2>\n          </div>\n          <div>\n            <h2 className='wish'>Wishing All Muslim Ummah Ramadan Mubarak</h2>\n            <footer>&copy; 2022 Sanusi Abdulkadir<br/>Software Engineer (React developer)</footer>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Ramadan;\n","import React from 'react';\nimport './App.css';\nimport Ramadan from './Ramadan';\nimport { Route, Switch } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Switch>\n        <Route exact path='/ramadan-countdown-app' component={Ramadan} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}